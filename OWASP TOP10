OWASP (Open Web Application Security Project)
OWASP Top 10 lists the most common and critical web application vulnerabilities based on real-world data


1.Broken access control
 users gain un-intended permissions
 eg: Accessing /admin

solution:
 before deleting a record, verify the logged-in user is allowed to delete that resource.
 create explicit "allow" rules for all legitimate traffic, users, and actions


2.Cryptographic Failures
  sensitive data is exposed/not securely transferred 

solution:
  use https  
  use algorithms like AES-256 for data encryption
  do not use MD5, SHA1

3.Injection
  Malicious input is sent to a database or command interpreter, tricking it into executing unintended commands.

solution:
  use prepared statements
  confirm that each input matches the expected format (e.g., a valid email like user@domain.com)
  give your application’s database account only the access needed (SELECT, INSERT, UPDATE, DELETE)—never higher-level permissions like DROP or ALTER.

4.Insecure Design
  The app is insecure from the design stage

solution:
  before coding, map out “what can go wrong?”
  automatically invalidate sessions after inactivity.

5.Security Misconfiguration
  Systems are insecure due to default or incorrect configurations.

solution:
  Disable unused features and services
  Use automated tools to scan for misconfigurations and vulnerabilities
**Content-Security-Policy (CSP): This header restricts which sources (scripts, styles, images) the browser can load, blocking most Cross-Site Scripting (XSS) and data injection attacks. Example:
Content-Security-Policy: default-src 'self'; script-src 'self' https://trusted.com;

6.Vulnerable and Outdated Components
  Using old frameworks, libraries, or dependencies with known vulnerabilities.

solution:
  Know what libraries, versions, and plugins you’re using.
  use dependabot(for GitHub) to analuze your proj. dependencies for known vulnerabilities


7.Identification and Authentication Failures
  Weak or poorly implemented login and session management.

solution:
  Use Strong Password Policies  
  MFA
  hash passwords
 
  

8. software and data integrity failures  
code or data can be tampered with  
e: app downloads update over http not https  

9. security logging and monitoring failures  
attacks go undetected due to poor logging  
e: brute force login not recorded anywhere  

10. server-side request forgery (ssrf)  
    Application fetches URLs based on user input without validation, letting attackers trick it into accessing internal systems.
